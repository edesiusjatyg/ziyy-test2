
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nik: 'nik',
  phone: 'phone',
  membership: 'membership',
  ptAmount: 'ptAmount',
  joinDate: 'joinDate',
  expiryDate: 'expiryDate',
  status: 'status'
};

exports.Prisma.CoupleScalarFieldEnum = {
  id: 'id',
  member1Id: 'member1Id',
  member2Id: 'member2Id'
};

exports.Prisma.MemberArrivalScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  arrivalDate: 'arrivalDate',
  arrivalType: 'arrivalType'
};

exports.Prisma.IncidentileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  type: 'type',
  class: 'class',
  pt: 'pt',
  sauna: 'sauna',
  paymentMethod: 'paymentMethod',
  paymentAmount: 'paymentAmount',
  date: 'date'
};

exports.Prisma.TxFoScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  note: 'note',
  paymentMethod: 'paymentMethod',
  paymentAmount: 'paymentAmount',
  date: 'date',
  billId: 'billId'
};

exports.Prisma.TxCanteenScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  note: 'note',
  itemId: 'itemId',
  itemAmount: 'itemAmount',
  paymentMethod: 'paymentMethod',
  paymentAmount: 'paymentAmount',
  date: 'date',
  billId: 'billId'
};

exports.Prisma.TxAccountingScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  note: 'note',
  paymentMethod: 'paymentMethod',
  paymentAmount: 'paymentAmount',
  date: 'date',
  billId: 'billId'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  kpi: 'kpi',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status'
};

exports.Prisma.ActivityMarketingScalarFieldEnum = {
  id: 'id',
  username: 'username',
  campaignId: 'campaignId',
  title: 'title',
  description: 'description',
  date: 'date'
};

exports.Prisma.CanteenItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  stock: 'stock',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  role: 'role',
  createdAt: 'createdAt',
  lastLogin: 'lastLogin',
  name: 'name'
};

exports.Prisma.UserActionsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  time: 'time',
  description: 'description'
};

exports.Prisma.MonthlyReportScalarFieldEnum = {
  id: 'id',
  period: 'period',
  displayName: 'displayName',
  totalMembers: 'totalMembers',
  activeMembers: 'activeMembers',
  expiredMembers: 'expiredMembers',
  newMembers: 'newMembers',
  renewals: 'renewals',
  incidentiles: 'incidentiles',
  incidentilesGym: 'incidentilesGym',
  incidentilesClass: 'incidentilesClass',
  canteenItemsSold: 'canteenItemsSold',
  finishedCampaigns: 'finishedCampaigns',
  finishedCampaignNames: 'finishedCampaignNames',
  finishedCampaignActivities: 'finishedCampaignActivities',
  foTotalIncome: 'foTotalIncome',
  canteenTotalIncome: 'canteenTotalIncome',
  accountingTotalIncome: 'accountingTotalIncome',
  foTotalExpenses: 'foTotalExpenses',
  canteenTotalExpenses: 'canteenTotalExpenses',
  accountingTotalExpenses: 'accountingTotalExpenses',
  netIncome: 'netIncome',
  cashBalance: 'cashBalance',
  status: 'status',
  generatedAt: 'generatedAt',
  updatedAt: 'updatedAt',
  incClassChartData: 'incClassChartData',
  incGymChartData: 'incGymChartData',
  memberChartData: 'memberChartData'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.MembershipType = exports.$Enums.MembershipType = {
  PERSONAL: 'PERSONAL',
  COUPLE: 'COUPLE',
  MUAY_THAI_MEMBER: 'MUAY_THAI_MEMBER',
  MUAY_THAI_PRIVATE: 'MUAY_THAI_PRIVATE'
};

exports.MemberStatus = exports.$Enums.MemberStatus = {
  ACTIVE: 'ACTIVE',
  NEAR_EXPIRY: 'NEAR_EXPIRY',
  EXPIRED: 'EXPIRED'
};

exports.ArrivalType = exports.$Enums.ArrivalType = {
  GYM: 'GYM',
  GYM_PT: 'GYM_PT'
};

exports.IncidentileType = exports.$Enums.IncidentileType = {
  GYM: 'GYM',
  KELAS: 'KELAS',
  SAUNA: 'SAUNA',
  PT: 'PT'
};

exports.IncidentileClass = exports.$Enums.IncidentileClass = {
  ZUMBA: 'ZUMBA',
  BODY_FAT: 'BODY_FAT',
  AEROBIC: 'AEROBIC',
  MUAY_THAI: 'MUAY_THAI',
  POUND_FIT: 'POUND_FIT',
  STRONG_NATION: 'STRONG_NATION',
  YOGA: 'YOGA'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  TRANSFER: 'TRANSFER',
  DEBIT_BRI: 'DEBIT_BRI',
  QRIS_BRI: 'QRIS_BRI',
  TRANSFER_BRI: 'TRANSFER_BRI',
  DEBIT_MANDIRI: 'DEBIT_MANDIRI',
  QRIS_MANDIRI: 'QRIS_MANDIRI',
  EDC_MANDIRI: 'EDC_MANDIRI',
  TRANSFER_MANDIRI: 'TRANSFER_MANDIRI'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  PEMASUKAN: 'PEMASUKAN',
  PENGELUARAN: 'PENGELUARAN'
};

exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  SUPERVISOR: 'SUPERVISOR',
  FRONT_OFFICE: 'FRONT_OFFICE',
  CANTEEN: 'CANTEEN',
  ACCOUNTING: 'ACCOUNTING',
  MARKETING: 'MARKETING'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

exports.Prisma.ModelName = {
  Member: 'Member',
  Couple: 'Couple',
  MemberArrival: 'MemberArrival',
  Incidentile: 'Incidentile',
  TxFo: 'TxFo',
  TxCanteen: 'TxCanteen',
  TxAccounting: 'TxAccounting',
  Campaign: 'Campaign',
  ActivityMarketing: 'ActivityMarketing',
  CanteenItem: 'CanteenItem',
  User: 'User',
  UserActions: 'UserActions',
  MonthlyReport: 'MonthlyReport'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
